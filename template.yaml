AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  ProcessorFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: processor/dist/index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          AWS_REGION: 'us-east-1'
          TABLE_NAME: !Ref TelemetryStoreTable
      Events:
        TelemetryQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TelemetryQueue.Arn

  RetrievalFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: retriever/dist/index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          AWS_REGION: 'us-east-1'
          TABLE_NAME: !Ref TelemetryStoreTable

  AuthorizerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: authorizer/dist/index.handler
      Runtime: nodejs18.x
      Environment:
        Variables:
          AWS_REGION: 'us-east-1'
          # Can be kept safer
          JWT_SECRET: 100189e85bd88238dd6b8fa6444c0100f778c2b1047f32ad47443d9de17fc939

  TelemetryStoreTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: siteId
          AttributeType: S
        - AttributeName: deviceId
          AttributeType: S
        - AttributeName: creationTime
          AttributeType: N
      KeySchema:
        - AttributeName: siteId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: deviceIdIndex
          KeySchema:
            - AttributeName: deviceId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
        - IndexName: creationTimeIndex
          KeySchema:
            - AttributeName: creationTime
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  TelemetryQueue:
    Type: 'AWS::SQS::Queue'

  TelemetryDLQ:
    Type: 'AWS::SQS::Queue'

  ApiGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: prod
      Auth:
        Authorizers:
          MyAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            IdentitySource: method.request.header.Authorization
            Type: REQUEST
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'Telemetry API'
          version: '2018-07-19'
        paths:
          /telemetries/{siteId}:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProcessorFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - MyAuthorizer: []

          /telemetries:
            get:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RetrievalFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy
              security:
                - MyAuthorizer: []
